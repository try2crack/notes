---
layout: post
title:  "记录一次Go与BrainFuck的reverse"
date:   2021-07-24 23:54:00 +0000
categories: Reverse
---

- 题目名字为re longlong，一个x64上去除了符号的程序，从其中的字符串信息中，可以确认是个1.6版本的go的程序，本想直接分析下，但没有符号比较麻烦，因此最后又选择了先恢复符号（虽然最后证实不恢复符号没太大关系）

- 从[https://github.com/sibears/IDAGolangHelper](https://) 下载IDAGolangHelper插件并配置（见插件配置和使用），go版本1.6，可以反编译名称大体如下：

![img](/public/src/20210725/1.png)

- 查看恢复好符号的程序，定位到函数main_main,可以看到其中有价值的字符串：

```
>>[-]>[-]<>+++++++[<++++++++++>-]<+.>+++++[<+++++++>-]<-.++++..--------.>+++++++[<---------->-]<+.>+++++++[<++++++++++>-]<.++++++.-----------.++++++.>+++++[<--------->-]<.>+++++[<----->-]<-.[-]><>[-]<<[-]>[>+<<+>-]>[<+>-]<><[-]><,>[-]>[-]++++++[<+++++++++>-]<><<[->-<]+>[<->[-]]<[>>[-]>[-]<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-][-]+><<>[<+>-]<>[-]<<<<[-]>>>[>+<<<<+>>>-]>[<+>-]<><<<[-]][-]><,>[-]>[-]+++++[<+++++++++++>-]<><<[->-<]+>[<->[-]]<[>>[-]>[-]<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-][-]+><<>[<+>-]<>[-]<<<<[-]>>>[>+<<<<+>>>-]>[<+>-]<><<<[-]][-]><,>[-]>[-]+++++++[<++++++++>-]<><<[->-<]+>[<->[-]]<[>>[-]>[-]<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-][-]+><<>[<+>-]<>[-]<<<<[-]>>>[>+<<<<+>>>-]>[<+>-]<><<<[-]][-]><,>[-]>[-]++++++++++[<++++++++++>-]<><<[->-<]+>[<->[-]]<[>>[-]>[-]<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-][-]+><<>[<+>-]<>[-]<<<<[-]>>>[>+<<<<+>>>-]>[<+>-]<><<<[-]][-]><,>[-]>[-]+++++[<++++++++++>-]<+><<[->-<]+>[<->[-]]<[>>[-]>[-]<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-][-]+><<>[<+>-]<>[-]<<<<[-]>>>[>+<<<<+>>>-]>[<+>-]<><<<[-]][-]><,>[-]>[-]+++++++[<++++++++>-]<+><<[->-<]+>[<->[-]]<[>>[-]>[-]<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-][-]+><<>[<+>-]<>[-]<<<<[-]>>>[>+<<<<+>>>-]>[<+>-]<><<<[-]][-]><,>[-]>[-]++++++[<++++++++>-]<><<[->-<]+>[<->[-]]<[>>[-]>[-]<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-][-]+><<>[<+>-]<>[-]<<<<[-]>>>[>+<<<<+>>>-]>[<+>-]<><<<[-]][-]><,>[-]>[-]+++++[<++++++++++>-]<><<[->-<]+>[<->[-]]<[>>[-]>[-]<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-][-]+><<>[<+>-]<>[-]<<<<[-]>>>[>+<<<<+>>>-]>[<+>-]<><<<[-]][-]><,>[-]>[-]+++++++[<++++++++>-]<><<[->-<]+>[<->[-]]<[>>[-]>[-]<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-][-]+><<>[<+>-]<>[-]<<<<[-]>>>[>+<<<<+>>>-]>[<+>-]<><<<[-]][-]><,>[-]>[-]++++++++[<++++++++++++>-]<+><<[->-<]+>[<->[-]]<[>>[-]>[-]<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-][-]+><<>[<+>-]<>[-]<<<<[-]>>>[>+<<<<+>>>-]>[<+>-]<><<<[-]][-]><,>[-]>[-]+++++++++[<+++++++++++>-]<><<[->-<]+>[<->[-]]<[>>[-]>[-]<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-][-]+><<>[<+>-]<>[-]<<<<[-]>>>[>+<<<<+>>>-]>[<+>-]<><<<[-]][-]><,>[-]>[-]++++++[<+++++++++>-]<-><<[->-<]+>[<->[-]]<[>>[-]>[-]<<<<[>>>+>+<<<<-]>>>>[<<<<+>>>>-][-]+><<>[<+>-]<>[-]<<<<[-]>>>[>+<<<<+>>>-]>[<+>-]<><<<[-]][-]>[-]<<[>+>+<<-]>>[<<+>>-][-]++++++++++++><<[->-<]+>[<->[-]]<[>>[-]>[-]<>++++++++++[<++++++++++>-]<++.++++++.-----------.++++++.>++++[<+++++>-]<.--.----------.++++++.---.>+++++++++[<--------->-]<-.>++++++++[<+++++++++>-]<+.+++++.++.+++++.-.+++++++++.<<[-]]<<
```

- 根据字串内容，可以确认是BrainFuck代码，直接复制到解码网址发现并不可以得到flag，看起来应该是一段需要运算的过程了：

![img](/public/src/20210725/2.png)

因此找到C解释代码运行查看结果，C代码参考：[https://blog.csdn.net/sm9sun/article/details/53896962](https://)

- 解释器运行上述字串，可以看到需要给出输入，然后获取flag（这与直接运行程序的效果相同），因此，题目大体就是用Go实现了BF的解释器，然后要求给出正确flag

![img](/public/src/20210725/3.png)

- 根据输入和输出的规律，分析BF代码中判断flag的方式。BF代码获取输入依靠‘，’来完成，查看bf代码中，共包含12处，因此输入长度为12

- 将bf代码进行转换，转换成指针移动、指针赋值的C代码形式，以便于分析（代码参考：[https://gitee.com/PlanC14/BFTOC](https://)）：

![img](/public/src/20210725/4.png)

- 根据规律确认，bf代码中拼凑字符为`x*y+z`形式，如Gimme的`‘G’= 7*10+1`，所以在bf代码中计算原始flag应该也会有相应的计算方式(因为要比较flag)，并且很可能分布于获取输入附近：

![img](/public/src/20210725/5.png)

- 对12处的代码手动计算，得到各自的结果：678d39028ac5

- 运行解释器代码：

![img](/public/src/20210725/6.png)

**插件配置**

- 插件目录：

![img](/public/src/20210725/7.png)

- 设置python中插件路径（mac中可如下，windows下也可以直接复制到python的site-packages目录），并重启IDA

![img](/public/src/20210725/8.png)

- 使用插件：从插件目录直接加载脚本

![img](/public/src/20210725/10.png)

- 重命名函数名称：

![img](/public/src/20210725/9.png)
  